<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_lcj_rd2_zh">
 <title>サイズの指定された整数型，その最大値・最小値，整数定数を作るマクロ</title>
 <shortdesc></shortdesc>
 <conbody>
  <p>(3-3-1) int8_t 符号付き8ビット整数（オプション，C99準拠）</p>
  <p>(3-3-2) uint8_t 符号無し8ビット整数（オプション，C99準拠）</p>
  <p>(3-3-3) int16_t 符号付き16ビット整数（C99準拠）</p>
  <p> (3-3-4) uint16_t 符号無し16ビット整数（C99準拠）</p>
  <p> (3-3-5) int32_t 符号付き32ビット整数（C99準拠）</p>
  <p> (3-3-6) uint32_t 符号無し32ビット整数（C99準拠） </p>
  <p>(3-3-7) int64_t 符号付き64ビット整数（オプション，C99準拠）</p>
  <p> (3-3-8) uint64_t 符号無し64ビット整数（オプション，C99準拠）</p>
  <p> (3-3-9) int128_t 符号付き128ビット整数（オプション，C99準拠）</p>
  <p> (3-3-10) uint128_t 符号無し128ビット整数（オプション，C99準拠）</p>
  <p> (3-3-11) int_least8_t 8ビット以上の符号付き整数（C99準拠）</p>
  <p> (3-3-12) uint_least8_t 8ビット以上の符号無し整数（C99準拠）</p>
  <p> (3-3-13) intptr_t ポインタを格納できるサイズの符号付き整数（C99準拠）</p>
  <p> (3-3-14) uintptr_t ポインタを格納できるサイズの符号無し整数（C99準拠）</p>
  <p> (3-3-15) INT8_MAX int8_tに格納できる最大値（オプション，C99準拠）</p>
  <p> (3-3-16) INT8_MIN int8_tに格納できる最小値（オプション，C99準拠）</p>
  <p> (3-3-17) UINT8_MAX uint8_tに格納できる最大値（オプション，C99準拠）</p>
  <p> (3-3-18) INT16_MAX int16_tに格納できる最大値（C99準拠）</p>
  <p> (3-3-19) INT16_MIN int16_tに格納できる最小値（C99準拠）</p>
  <p> (3-3-20) UINT16_MAX uint16_tに格納できる最大値（C99準拠）</p>
  <p> (3-3-21) INT32_MAX int32_tに格納できる最大値（C99準拠）</p>
  <p> (3-3-22) INT32_MIN int32_tに格納できる最小値（C99準拠）</p>
  <p> (3-3-23) UINT32_MAX uint32_tに格納できる最大値（C99準拠）</p>
  <p> (3-3-24) INT64_MAX int64_tに格納できる最大値（オプション，C99準拠）</p>
  <p> (3-3-25) INT64_MIN int64_tに格納できる最小値（オプション，C99準拠）</p>
  <p> (3-3-26) UINT64_MAX uint64_tに格納できる最大値（オプション，C99準拠）</p>
  <p> (3-3-27) INT128_MAX int128_tに格納できる最大値（オプション，C99準拠）</p>
  <p> (3-3-28) INT128_MIN int128_tに格納できる最小値（オプション，C99準拠）</p>
  <p> (3-3-29) UINT128_MAX uint128_tに格納できる最大値（オプション，C99準拠）</p>
  <p> (3-3-30) INT_LEAST8_MAX int_least8_tに格納できる最大値（C99準拠）</p>
  <p> (3-3-31) INT_LEAST8_MIN int_least8_tに格納できる最小値（C99準拠）</p>
  <p> (3-3-32) UINT_LEAST8_MAX uint_least8_tに格納できる最大値（C99準拠）</p>
  <p> (3-3-33) INT8_C(val) int_least8_t型の定数を作るマクロ（C99準拠）</p>
  <p> (3-3-34) UINT8_C(val) uint_least8_t型の定数を作るマクロ（C99準拠）</p>
  <p> (3-3-35) INT16_C(val) int16_t型の定数を作るマクロ（C99準拠）</p>
  <p> (3-3-36) UINT16_C(val) uint16_t型の定数を作るマクロ（C99準拠）</p>
  <p> (3-3-37) INT32_C(val) int32_t型の定数を作るマクロ（C99準拠）</p>
  <p> (3-3-38) UINT32_C(val) uint32_t型の定数を作るマクロ（C99準拠）</p>
  <p> (3-3-39) INT64_C(val) int64_t型の定数を作るマクロ（オプション，C99準拠）</p>
  <p> (3-3-40) UINT64_C(val) uint64_t型の定数を作るマクロ（オプション，C99準拠）</p>
  <p> (3-3-41) INT128_C(val) int128_t型の定数を作るマクロ（オプション，C99準拠）</p>
  <p> (3-3-42) UINT128_C(val) uint128_t型の定数を作るマクロ（オプション，C99準拠）</p>
  <p>指定されたサイズの整数型を，これらのシンボルに型定義する．また，データ 型に格納できる最大値・最小値と，整数定数を作るマクロを，これらのシンボ ルにマクロ定義する．</p>
  <p>これらのデータ型およびマクロは，C99に準拠したものである．開発環境にC99 に準拠したstdint.hが用意されている場合には，これらのデータ型およびマク
   ロを定義することに代えて，stdint.hをインクルードすればよい．</p>
  <p>上でオプションと記述したものは，該当するデータ型がコンパイラでサポート されている場合にのみ定義することを示す．</p>
  <p/>
 </conbody>
</concept>
