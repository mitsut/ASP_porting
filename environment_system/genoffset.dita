<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_x5j_lzd_zh">
 <title>makeoffset.cとgenoffsetを用いる方法</title>
 <shortdesc></shortdesc>
 <conbody>
  <p>makeoffset.cは，どのオフセット値をoffset.hに生成するかを指定するファイ ルで，ターゲット依存部で用意する．genoffsetは，makeoffset.cをコンパイル
   して得られるアセンブリソースファイルから，offset.hを生成するスクリプト である．genoffsetは，GNU開発環境にのみ対応している．</p>
  <p>makeoffset.cを記述する場合には，既存のターゲット依存部に含まれる makeoffset.cを修正するのが近道である．標準的なmakeoffset.cは，以下の6つ
   の部分で構成されている．なお，makeoffset.cを新たに記述した際には， offset.hに妥当な定義が生成されていることを確認すべきである．</p>
  <p>(1) 必要なファイルのインクルード</p>
  <p>オフセット値を求めたいフィールドを含む構造体を定義するヘッダファイルを インクルードする．TCB中のフィールドのオフセット値を求めたい場合には，以 下の3行を含めればよい．</p>
  <p>
   <codeblock>#include "kernel_impl.h"
#include "task.h"
#include "sil.h"</codeblock>
  </p>
  <p>(2) オフセット値出力用マクロの定義</p>
  <p>構造体中のフィールドのオフセット値の定義を生成するために用いるマクロ （OFFSET_DEFとOFFSET_DEF2）の定義．これらのマクロの定義は，修正する必要 がない．</p>
  <p>(3) オフセット値出力用関数の定義</p>
  <p>構造体中のフィールドのオフセット値の定義を生成するための関数 （makeoffset）の定義．オフセット値のマクロ定義を生成したいフィールド毎 に，次のいずれかのマクロを記述する．</p>
  <p>(2-5-2-1) OFFSET_DEF(TYPE, FIELD)</p>
  <p>TYPEに構造体のデータ型名，FIELDにその構造体中のフィールドを指定すると， TYPE_FIELDという名前のシンボルに，そのフィールドのオフセット値をマクロ
   定義する記述を生成する．</p>
  <p>(2-5-2-2) OFFSET_DEF2(TYPE, FIELD, FIELDNAME)</p>
  <p>TYPEに構造体のデータ型名，FIELDにその構造体中のフィールドを指定すると， TYPE_FIELDNAMEという名前のシンボルに，そのフィールドのオフセット値をマ
   クロ定義する記述を生成する．構造体に含まれる構造体中のフィールドのオフ セット値を求めたい場合には，こちらのマクロを使用する．</p>
  <p>(4) エンディアンを参照するための関数の定義</p>
  <p>SILで定義されたエンディアンを参照するための関数（sil_endian）の定義．こ の関数の定義は，修正する必要がない．</p>
  <p>(5) ビットオフセット値出力のための参照定義</p>
  <p>初期値を持った変数定義に対して，コンパイラが生成するアセンブリ命令を参 照するための変数（BIT_REF_4，BIT_REF_2，BIT_REF_1）の定義．これらの定義
   は，ほとんどの場合に修正する必要がない．ただし，uint8_t型のサポートされ ていないターゲットでは，BIT_REF_1の定義は削除する必要がある．また，ポイ
   ンタが64ビットのターゲット等では，BIT_REF_8の定義を追加しなければならな いと思われる．</p>
  <p>(6) ビットオフセット値出力用変数の定義</p>
  <p>ビットのオフセット値，ビット位置，ビットマスクの定義を生成するためのデー タ型の定義．これらの定義を生成したいビットフィールド毎に，以下の説明す る変数を定義する．</p>
  <p>構造体のデータ型名がTYPE，その構造体中のビットフィールド名がFIELDの場合 に，データ型がTYPEで，変数名がBIT_xy_TYPE_FIELDの変数を定義する．また，
   その変数を，対象のビットのみが1で，他のすべてのビットが0になるように初 期化する．ここで，xはエンディアンを指定する文字で，B（ビッグエンディア
   ン）またはL（リトルエンディアン）を指定する．またyには，ビットのオフセッ ト，ビット位置，ビットマスクを，8ビット単位（バイト単位）で求める場合に
   はBを，16ビット単位で求める場合にはHを，32ビット単位で求める場合にはWを 指定する．</p>
  <p>これにより，TYPE_FIELDという名前のシンボルにそのビットのオフセット， TYPE_FIELD_bitという名前のシンボルにビット位置，TYPE_FIELD_maskという名
   前のシンボルにビットマスクをマクロ定義する記述を生成する．なお，ビット 位置は，LSBを0とした値（ビットリトルエンディアンを想定）を求める．</p>
 </conbody>
</concept>
